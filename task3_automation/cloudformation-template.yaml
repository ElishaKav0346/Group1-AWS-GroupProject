AWSTemplateFormatVersion: '2010-09-09'
Description: Group1 - VPC with public/private subnets, IGW, NAT, and 2 EC2 instances

Parameters:
  KeyName:
    Type: String
    Description: Name of an existing EC2 Key Pair

Resources:
# VPC Automation
  Group1VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: Group1-VPC

# Public Subnet Automation
  Group1PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Group1VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: us-east-1a
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Group1-Public-Subnet

 # Private Subnet Automation
  Group1PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Group1VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: us-east-1b
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Group1-Private-Subnet

  # Public Route Table Automation
  Group1PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Group1VPC
      Tags:
        - Key: Name
          Value: Group1-Public-RouteTable

  AddPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachIGWToVPC
    Properties:
      RouteTableId: !Ref Group1PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref Group1IGW

  AssociatePublicSubnetWithRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Group1PublicSubnet
      RouteTableId: !Ref Group1PublicRouteTable

  # Private Route Table Automation
  Group1PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Group1VPC
      Tags:
        - Key: Name
          Value: Group1-Private-RouteTable

  AssociatePrivateSubnetWithRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Group1PrivateSubnet
      RouteTableId: !Ref Group1PrivateRouteTable

  # Internet Gateway Automation
  Group1IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: Group1-IGW

  AttachIGWToVPC:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Group1VPC
      InternetGatewayId: !Ref Group1IGW

  # Elastic IP for NAT Gateway Automation
  Group1NATEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  # NAT Gateway Automation
  Group1NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt Group1NATEIP.AllocationId
      SubnetId: !Ref Group1PublicSubnet
      Tags:
        - Key: Name
          Value: Group1-NAT-Gateway

  AddPrivateRouteToNAT:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref Group1PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref Group1NATGateway

  # Automation of our Security Group for our Web Server
  Group1WebSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH and HTTP access
      VpcId: !Ref Group1VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: Group1-Web-SecurityGroup

  # Automation for our DB Server Security Group 
  Group1DBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow MySQL from Web Server SG
      VpcId: !Ref Group1VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref Group1WebSG
      Tags:
        - Key: Name
          Value: Group1-DB-SecurityGroup

  # EC2 Web Server Automation
  Group1WebInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      ImageId: ami-0c02fb55956c7d316  # Amazon Linux 2 (us-east-1)
      SubnetId: !Ref Group1PublicSubnet
      SecurityGroupIds:
        - !Ref Group1WebSG
      Tags:
        - Key: Name
          Value: Group1-WebServer
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y httpd
          systemctl enable httpd
          systemctl start httpd
          echo "<h1>Group1 Web Server</h1>" > /var/www/html/index.html

  # EC2 DB Server Automation 
  Group1DBInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      ImageId: ami-0c02fb55956c7d316  # Amazon Linux 2 (us-east-1)
      SubnetId: !Ref Group1PrivateSubnet
      SecurityGroupIds:
        - !Ref Group1DBSG
      Tags:
        - Key: Name
          Value: Group1-DatabaseServer
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y mariadb-server
          systemctl enable mariadb
          systemctl start mariadb
